var http = require('http');
var fs = require('fs');
var url = require('url');
var chat = require('./chat');

http.createServer(function(req, res) {
  var urlParsed = url.parse(req.url);

  switch (urlParsed.pathname) {
    case '/':
      sendFile("index.html", res);
      break;

    case '/subscribe':
      chat.subscribe(req, res);
      break;

    case '/publish':
      var body = '';

      req
        .on('readable', function() {
          body += req.read();

          if (body.length > 1e4) {
            res.statusCode = 413;
            res.end("Your message is too big for my little chat");
          }
        })
        .on('end', function() {
          try {
            body = JSON.parse(body);
          } catch (e) {
            res.statusCode = 400;
            res.end("Bad Request");
            return;
          }

          chat.publish(body.message);
          res.end("ok");
        });

      break;

    default:
      res.statusCode = 404;
      res.end("Not found");
  }


}).listen(3000);


function sendFile(fileName, res) {
  var fileStream = fs.createReadStream(fileName);
  fileStream
    .on('error', function() {
      res.statusCode = 500;
      res.end("Server error");
    })
    .pipe(res)
    .on('close', function() {
      fileStream.destroy();
    });
}

// Lesson 6
/*var http = require('http');
var fs = require('fs');

var server = http.Server(function(req, res) { }).listen(3000);

setTimeout(function() {
	server.close();
}, 2500);

var timer = setInterval(function() {
	console.log(process.memoryUsage());
}, 1000);

timer.unref();*/

// Lesson 5
/*var http = require('http');
var fs = require('fs');

http.createServer(function(req, res) {
	var info;

	if (req.url == '/') {

		fs.readFile('debug.log', function(err, info) {
			if (err) {
				console.error(err);
				res.statusCode = 500;
				res.end("На сервере произошла ошибка!");
				return;
			}

			res.end(info);
		});
	} else { }

}).listen(3000);*/


// Lesson 4
/*var http = require('http');
var log = require('winston');

var server = http.createServer();

server.on('request', require('./request'));

server.listen(1337, '127.0.0.1');

log.info("Server is running");*/

// Lesson 3
/*var http = require('http');
var url = require('url');

var server = new http.Server(function(req, res) {
	console.log( req.method, req.url );
	
	var urlParsed = url.parse(req.url, true);
	console.log(urlParsed);
	debugger;

	if (urlParsed.pathname == '/echo' && urlParsed.query.message) {
		res.setHeader('Cache-control', 'no-cache');
		res.end( urlParsed.query.message);
	} else {
		res.statusCode = 404;
		res.end("Page not found");
	}

	res.end("Ok");
});

server.listen(1337, '127.0.0.1');*/


// Lesson 2
/*var http = require('http');

var server = new http.Server();

server.listen(1337, '127.0.0.1');

var counter = 0;

var emit = server.emit;
server.emit = function(event) {
	console.log(event);
	emit.apply(server, arguments);
};

server.on('request', function(req, res) {
	res.end("Привет, мир!" + ++counter);
});*/


// It was first lesson
/*var User = require('user');
var log = require('logger')(module);
var util = require('util');
var db = require('db');
db.connect();

function run() {
	var vasya = new User("Вася");
	var petya = new User("Петя");

	vasya.hello(petya);

	log(util.inspect(vasya));
	log(util.format("My %s %d %j", "строка", 111, {num: 333}));
	log(db.getPhrase("Run successful"));
}
if (module.parent) {
	exports.run = run;
} else {
	run();
}*/